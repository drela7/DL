#6-GAN
import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt

latent_dim = 100
height, width, channels = 28, 28, 1

generator = keras.Sequential([
    keras.layers.Dense(128 * 7 * 7, activation='relu', input_shape=(latent_dim,)),
    keras.layers.Reshape((7, 7, 128)),
    keras.layers.Conv2DTranspose(128, (4,4), strides=(2,2), padding='same', activation='relu'),
    keras.layers.Conv2DTranspose(128, (4,4), strides=(2,2), padding='same', activation='relu'),
    keras.layers.Conv2D(channels, (7,7), padding='same', activation='sigmoid')
])

discriminator = keras.Sequential([
    keras.layers.Conv2D(64, (3,3), strides=(2,2), padding='same', input_shape=[height, width, channels]),
    keras.layers.LeakyReLU(alpha=0.2),
    keras.layers.Dropout(0.4),
    keras.layers.Conv2D(128, (3,3), strides=(2,2), padding='same'),
    keras.layers.LeakyReLU(alpha=0.2),
    keras.layers.Dropout(0.4),
    keras.layers.Flatten(),
    keras.layers.Dense(1, activation='sigmoid')
])
discriminator.compile(optimizer='adam', loss='binary_crossentropy')

gan_input = keras.Input(shape=(latent_dim,))
gan_output = discriminator(generator(gan_input))
gan = keras.Model(gan_input, gan_output)
gan.compile(optimizer='adam', loss='binary_crossentropy')

def generate_real_shapes(n_samples):
    X_circle = np.random.uniform(0.3, 0.7, (n_samples, height, width, channels))
    X_square = np.random.uniform(0.3, 0.7, (n_samples, height, width, channels))
    X_circle += np.random.normal(0, 0.1, (n_samples, height, width, channels))
    X_square += np.random.normal(0, 0.1, (n_samples, height, width, channels))
    y_circle = np.ones((n_samples, 1))
    y_square = np.zeros((n_samples, 1))
    return np.concatenate((X_circle, X_square)), np.concatenate((y_circle, y_square))

def train_gan(epochs=100, batch_size=32):
    d_losses, g_losses = [], []
    for epoch in range(epochs):
        noise = np.random.normal(0, 1, (batch_size, latent_dim))
        generated_shapes = generator.predict(noise)
        real_shapes, labels = generate_real_shapes(batch_size)

        x_combined, y_combined = np.concatenate([real_shapes, generated_shapes]), np.concatenate([labels, np.zeros((batch_size, 1))])

        d_losses.append(discriminator.train_on_batch(x_combined, y_combined))
        g_losses.append(gan.train_on_batch(np.random.normal(0, 1, (batch_size, latent_dim)), np.ones((batch_size, 1))))

        print(f'Epoch: {epoch+1}, D Loss: {d_losses[-1]}, G Loss: {g_losses[-1]}')

    plt.plot(range(1, epochs + 1), d_losses, label='Discriminator Loss')
    plt.plot(range(1, epochs + 1), g_losses, label='Generator Loss')
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.legend()
    plt.show()
train_gan(epochs=100, batch_size=32)
